üìö Documentation technique ‚Äì Backend DroneWeb
1. Pr√©sentation g√©n√©rale

Le backend DroneWeb est une application Node.js/Express qui‚ÄØ:

    G√®re l‚Äôhistorique des vols (fichiers JSON locaux)

    G√®re l‚Äôancrage blockchain (vol + preuve ZIP horodat√©s)

    Sert de proxy vers l‚ÄôAPI GraphQL distante des drones

    Charge sa configuration depuis un fichier .env

    Dispose d‚Äôun syst√®me de logs centralis√© filtrable (LOG_LEVEL)

    Impl√©mente une gestion centralis√©e des erreurs & routes inexistantes

2. Architecture du projet

text
üìÇ backend/
‚îÇ
‚îú‚îÄ‚îÄ üìÇ routes/                 # Les groupes d‚ÄôAPI Express
‚îÇ   ‚îú‚îÄ‚îÄ history.js              # Routes pour l‚Äôhistorique des vols
‚îÇ   ‚îú‚îÄ‚îÄ anchor.js               # Routes pour les ancrages
‚îÇ   ‚îú‚îÄ‚îÄ graphql.js              # Routes proxy GraphQL
‚îÇ   ‚îî‚îÄ‚îÄ index.js                # Routeur global
‚îÇ
‚îú‚îÄ‚îÄ üìÇ services/               # Logique m√©tier (pas de code Express ici)
‚îÇ   ‚îú‚îÄ‚îÄ flightService.js        # Gestion historique vols
‚îÇ   ‚îú‚îÄ‚îÄ anchorService.js        # Gestion ancrages
‚îÇ
‚îú‚îÄ‚îÄ üìÇ middlewares/            # Middlewares Express
‚îÇ   ‚îú‚îÄ‚îÄ notFoundHandler.js      # Gestion 404
‚îÇ   ‚îî‚îÄ‚îÄ errorHandler.js         # Gestion d‚Äôerreurs globale
‚îÇ
‚îú‚îÄ‚îÄ üìÇ utils/
‚îÇ   ‚îî‚îÄ‚îÄ logger.js               # Logger centralis√© filtrable par LOG_LEVEL
‚îÇ
‚îú‚îÄ‚îÄ server.js                   # Point d‚Äôentr√©e de l‚Äôapplication
‚îú‚îÄ‚îÄ .env / .env.dev / .env.prod # Configurations
‚îî‚îÄ‚îÄ package.json

3. Fonctionnement interne
3.1 server.js

    Charge les variables .env

    Configure CORS, parsing JSON, TLS (d√©sactivable pour le dev)

    Monte routes/index.js

    Positionne :

        notFoundHandler ‚Üí 404

        errorHandler ‚Üí erreurs serveur

    Lance l‚Äô√©coute sur BACKEND_PORT

3.2 Les routes

    Minimalistes : elles d√©finissent les chemins et d√©l√®guent au service associ√©.

    Log chaque requ√™te re√ßue via le logger centralis√© (log()).

    Ne contiennent pas de logique m√©tier.

Exemple (/routes/history.js) :

js
router.get('/history', async (req, res, next) => {
  log('debug', `‚Üí GET /history depuis ${req.ip}`);
  try {
    await flightsService.handleGetHistory(req, res);
  } catch (error) {
    next(error);
  }
});

3.3 Les services

flightService.js

    Lecture/√©criture dans flights_history.json

    Ajout en lot / unitaire

    Export d‚Äôun vol par ID et date

    √âvite les doublons

    Tous les logs filtrables (info, debug, warn, error)

anchorService.js

    Lecture/√©criture anchored.json

    Sauvegarde dans dossier dat√© :
    ancrage.json + preuve.zip

    V√©rifie les doublons d‚Äôancrages

üí° tokenService.js supprim√© dans cette version car /graphql est accessible sans authentification.
3.4 Middlewares

middlewares/notFoundHandler.js

    Retourne un 404 avec un log warn incluant la m√©thode, l‚ÄôURL et l‚ÄôIP.

middlewares/errorHandler.js

    Retourne une r√©ponse JSON uniforme :

json
{
  "success": false,
  "error": "Message d'erreur",
  "errorStack": "..." // seulement en dev
}

    Enregistre l‚Äôerreur en fonction du niveau.

3.5 Logger centralis√© (utils/logger.js)

    D√©finit les niveaux : error > warn > info > debug

    Filtre l‚Äôaffichage selon LOG_LEVEL dans .env

    Format :

text
[INFO] 2025-08-14T08:22:33.123Z - Message

Exemple :

js
log('info', 'Historique charg√© avec 32 vols');
log('debug', `Requ√™te entrante ${req.method} ${req.url}`);
log('error', `Erreur lors de l‚Äô√©criture : ${error.message}`);

4. Configuration .env
Variables disponibles :

text
##############################################
# SERVEUR
##############################################
BACKEND_PORT=3200
CORS_ORIGIN=*          # En prod ‚Üí domaine exact
MAX_JSON_SIZE=5mb
IGNORE_TLS_ERRORS=false
NODE_ENV=development
LOG_LEVEL=debug        # debug | info | warn | error

##############################################
# API DRONE DISTANTE (GraphQL)
##############################################
API_PROTOCOL=http
API_HOST=192.168.1.105
API_PORT=3200

##############################################
# STOCKAGE LOCAL
##############################################
FLIGHTS_HISTORY_FILE=flights_history.json
ANCHOR_FILE=anchored.json
ANCHORED_DIR=anchored

##############################################
# BLOCKCHAIN (optionnel)
##############################################
BLOCKCHAIN_API_URL=
BLOCKCHAIN_API_KEY=

5. Bonnes pratiques internes

    Toute logique m√©tier ‚Üí services/

    Aucune valeur en dur ‚Üí passer par .env

    Logs normalis√©s :

        info : √©v√©nements importants

        debug : bruit de debug (masqu√© en prod)

        warn : anomalies non bloquantes

        error : √©chec bloquant

    Gestion unique des erreurs :

        lever des exceptions dans les services

        propagation avec next(error) dans les routes

    Pas de console.log() brut : toujours passer par le logger

6. Lancement & Dev Workflow

Installation :

bash
cd backend
npm install

Lancement en dev :

bash
LOG_LEVEL=debug npm start

Lancement en prod :

bash
NODE_ENV=production LOG_LEVEL=info npm start

Flux de dev recommand√© :

    Cr√©er une nouvelle fonctionnalit√© ‚Üí ajouter/mettre √† jour un service

    Cr√©er la route associ√©e

    Importer dans routes/index.js

    Tester via Postman / frontend

    Committer et passer en revue

7. Historique des refactos par rapport √† l'ancien backend

    Suppression tokenService.js ‚Üí pas de token requis pour /graphql

    Suppression d√©pendances inutiles (body-parser, graphql)

    Centralisation du logging ‚Üí utils/logger.js

    R√©duction massive du bruit console

    Passages syst√©matiques par LOG_LEVEL pour filtrer

    Uniformisation des formats de logs

    S√©paration stricte logique m√©tier / routes

    .env nettoy√© ‚Üí suppression variables inutilis√©es (LOGIN, PASSWORD, etc.)

