Le dossier utils/ contient les fonctions utilitaires et constantes globales utilisées dans tout le frontend DroneWeb.
Ces fichiers servent à :

    Centraliser les valeurs fixes (URLs, champs affichés…)

    Fournir des fonctions communes de formatage et d’extraction

    Encapsuler la logique technique récurrente (requêtes GraphQL, calculs de distance…)

    Centraliser les ressources d’UI (icônes Leaflet)

1️⃣ constants.ts
🎯 Rôle

Contient toutes les constantes réutilisables dans l’application :

    URLs d’API

    Champs affichés dans les tables et panneaux

    Paramètres globaux (pagination)

📦 Contenu

    GRAPHQL_URL, HISTORY_URL, ANCHOR_URL → URLs des services backend

    LIVE_FIELDS → colonnes affichées dans les tables live

    HISTORY_API_FIELDS → colonnes affichées pour l’historique API

    LIVE_DETAILS, EVENT_DETAILS → champs détaillés pour panneaux de détails live/historique

    PER_PAGE → taille par page pour pagination

    logConstantsAccess() → fonction pour tracer l’accès aux constantes

📌 Notes

    Dans notre version optimisée, ces URLs reposent sur API_BASE_URL défini via .env

    Les listes de champs peuvent être marquées as const pour un typage plus strict

2️⃣ coords.ts
🎯 Rôle

Gère l’extraction et la manipulation des coordonnées GPS utilisées dans le projet :

    Récupération des traces de vols

    Parsing de strings JSON en listes de points

    Correspondance traces/événements par ID ou distance

📦 Fonctions

    LatLng → type [lat, lng]

    getFlightTrace(flight)
    Récupère une liste de [lat,lng] depuis flight.trace (tableau ou JSON) ou tracing.points

    parseTracePoints(str)
    Parse une chaîne JSON en tableau LatLng[]

    findMatchingTrace(traces, event, maxDistanceMeters)
    Cherche une trace correspondant à un événement par ID ou proximité (Haversine)

    haversineDistance(lat1,lon1,lat2,lon2) (dans version optimisée)
    Calcule distance en mètres

📌 Notes

    Gestion robuste des formats inattendus

    Logs filtrables via un paramètre debug

    isLatLng() permet de valider un point [number, number]

3️⃣ format.ts
🎯 Rôle

Fonctions de formatage d’affichage des données pour l’UI.
📦 Fonctions

    formatDate(dateStr)
    Formate une date ISO/timestamp en format fr-FR lisible
    Ignore ou renvoie vide si invalide

    prettyValue(key, value)
    Adapte l’affichage selon la clé :

        boolean → Oui / Non

        Champ date/time → passe par formatDate

        Altitude/distance → ajoute m

        Vitesse → ajoute m/s

        Sévérité → mapping vers texte

        Tableau → jointure par virgules

        Objet {lat,lng} → affichage coordonnée

        Objet générique → JSON.stringify ou safeStringify

📌 Notes

    Logs contrôlés par DEBUG flag

    Mapping SEVERITY_LABELS peut être externalisé dans constants.ts

    Toutes les conversions passent par String() pour éviter erreurs d’affichage

4️⃣ graphql.ts
🎯 Rôle

Centralise :

    Les requêtes GraphQL brutes (queries statiques)

    La génération dynamique de queries

    L’exécution des requêtes avec fetchGraphQL

📦 Contenu

    DRONE_QUERY → infos détaillées d’un drone

    EVENT_HISTORY_GRAPHQL → historique événements trié par date

    DRONETRACES_GRAPHQL(from,to) → requête dynamique pour traces

    fetchGraphQL(query, url?, headers?) → fonction générique POST GraphQL

        Gère erreurs HTTP (!ok)

        Gère erreurs GraphQL (errors dans reponse)

        Retour typable <T>

📌 Notes

    GRAPHQL_URL est importé de constants.ts

    Idéalement séparer queries pures dans un queries.ts

5️⃣ icons.ts
🎯 Rôle

Stocke toutes les icônes Leaflet utilisées par applicatif, avec configuration standardisée.
📦 Contenu

    droneIcon → icône PNG pour drones live

    historyIcon → icône PNG pour historiques

📌 Notes

    Paramètres communs (iconSize, iconAnchor, popupAnchor) peuvent être mis dans une fonction createIcon() pour éviter répétitions

    URLs centralisées dans un objet ICON_URLS pour modification facile

🛠 Bonnes pratiques pour utils/

    Centraliser les paramètres/env dans constants.ts

    Débug désactivé en prod via process.env.NODE_ENV

    Fonctions pures → aucun effet de bord non contrôlé, pour un test unitaire facile

    Typage strict (as const, gardes de type)
